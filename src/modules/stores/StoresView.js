import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {
  StyleSheet,
  TouchableOpacity,
  Text,
  View,
  ScrollView,
  PushNotificationIOS
} from 'react-native';
import {DeviceEventEmitter} from 'react-native';
import Beacons from 'react-native-beacons-manager';
import PushNotification from 'react-native-push-notification';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import {colors, appStyle} from '../../styles';
import {stores} from '../../constants';

const storeIcon = (<MaterialIcon name='store' size={26} color={colors.overlayBackground} />);

// Define a region which can be identifier + uuid,
// identifier + uuid + major or identifier + uuid + major + minor
// (minor and major properties are numbers)
// const region = {
//   identifier: '76ae1bda4f863d5db907f01ed9b3892e',
//   uuid: 'B9407F30-F5F8-466E-AFF9-25556B57FE6D'
// };

const region = {
  identifier: '14563c2efc7e1e395e3b3da41df2a32b',
  uuid: '3600D271-0466-4E79-A66A-2F9DC063AC18'
};

class StoresView extends Component {
  static displayName = 'StoresView';

  static navigationOptions = {
    title: 'Tiendas',
    tabBarIcon: storeIcon
  }

  static propTypes = {
    loading: PropTypes.bool.isRequired,
    navigate: PropTypes.func.isRequired
  };

  constructor(props) {
    super(props);
    this.state = {
      beacon: {},
      notificationBadgeNumber: 0
    };
  }

  componentWillMount = () => {
    // MANDATORY: you have to request ALWAYS Authorization (not only when in use) when monitoring
    // you also have to add "Privacy - Location Always Usage Description" in your "Info.plist" file
    // otherwise monitoring won't work
    Beacons.requestAlwaysAuthorization();
    Beacons.shouldDropEmptyRanges(true);

    // Monitor for beacons inside the region
    Beacons
      .startMonitoringForRegion(region) // or like  < v1.0.7: .startRangingBeaconsInRegion(identifier, uuid)
      .then(() => console.log('Beacons monitoring started succesfully'))
      .catch(error => console.log(`Beacons monitoring not started, error: ${error}`));
    // Range for beacons inside the region
    Beacons
      .startRangingBeaconsInRegion(region) // or like  < v1.0.7: .startRangingBeaconsInRegion(identifier, uuid)
      .then(() => console.log('Beacons ranging started succesfully'))
      .catch(error => console.log(`Beacons ranging not started, error: ${error}`));

    // update location to ba able to monitor:
    Beacons.startUpdatingLocation();
  }

  componentWillUnMount() {
    // stop monitoring beacons:
    Beacons
      .stopMonitoringForRegion(region)
      .then(() => console.log('Beacons monitoring stopped succesfully'))
      .catch(error => console.log(`Beacons monitoring not stopped, error: ${error}`));
    // stop ranging beacons:
    Beacons
      .stopRangingBeaconsInRegion(region)
      .then(() => console.log('Beacons ranging stopped succesfully'))
      .catch(error => console.log(`Beacons ranging not stopped, error: ${error}`));
    // stop updating locationManager:
    Beacons.stopUpdatingLocation();
    // remove auth state event we registered at componentDidMount:
    this.authStateDidRangeEvent.remove();
    // remove monitoring events we registered at componentDidMount
    this.regionDidEnterEvent.remove();
    this.regionDidExitEvent.remove();
    // remove ranging event we registered at componentDidMount
    this.beaconsDidRangeEvent.remove();
  }

  componentDidMount = () => {
    // Listen for beacon changes
    // Ranging event
    if (this.state.notificationBadgeNumber > 0) {
      PushNotification.setApplicationIconBadgeNumber(this.state.notificationBadgeNumber);
    }
    this.beaconsDidRangeEvent = DeviceEventEmitter.addListener(
      'beaconsDidRange',
      (data) => {
        console.log('beaconsDidRange data: ', data.beacons[0]);
        console.log('proiximity: ', data.beacons[0].proximity);

        switch (data.beacons[0].proximity) {
          case 'immediate':
            data.beacons[0].proximityEs = 'Inmediato';
            PushNotification.localNotification({
              /* Android Only Properties */
              // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              // ticker: 'My Notification Ticker', // (optional)
              // autoCancel: true, // (optional) default: true
              // largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
              // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
              // bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
              // subText: 'This is a subText', // (optional) default: none
              // color: 'red', // (optional) default: system default
              // vibrate: true, // (optional) default: true
              // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              // tag: 'some_tag', // (optional) add tag to message
              // group: 'group', // (optional) add group to message
              // ongoing: false, // (optional) set whether this is an "ongoing" notification

              /* iOS only properties */
              // alertAction: 'view',// (optional) default: view
              // category: null,// (optional) default: null
              // userInfo: null,// (optional) default: null (object containing additional notification data)
              title: 'Confirmaci√≥n de compra', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
              message: 'Felicidades has comprado el producto!', // (required)
              bigText: 'Felicitaciones has comprado con exito aprovechando el descuento de la tienda =)', // (optional) default: "message" prop
              subText: 'By jah', // (optional) default: none
              tag: 'beacon', // (optional) add tag to message
              playSound: true,
              soundName: 'default'
            });
            this.setState({beacon: data.beacons[0], notificationBadgeNumber: this.state.notificationBadgeNumber + 1});
            break;
          case 'near':
            data.beacons[0].proximityEs = 'Cercano';
            PushNotification.localNotification({
              /* Android Only Properties */
              // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              // ticker: 'My Notification Ticker', // (optional)
              // autoCancel: true, // (optional) default: true
              // largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
              // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
              // bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
              // subText: 'This is a subText', // (optional) default: none
              // color: 'red', // (optional) default: system default
              // vibrate: true, // (optional) default: true
              // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              // tag: 'some_tag', // (optional) add tag to message
              // group: 'group', // (optional) add group to message
              // ongoing: false, // (optional) set whether this is an "ongoing" notification

              /* iOS only properties */
              // alertAction: 'view',// (optional) default: view
              // category: null,// (optional) default: null
              // userInfo: null,// (optional) default: null (object containing additional notification data)
              title: 'Dentro de la tienda', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
              message: 'Compra la promo #1 y obten un exelente descuento a traves de la app', // (required)
              bigText: 'Felicitaciones has comprado con exito aprovechando el descuento de la tienda =)', // (optional) default: "message" prop
              subText: 'By jah', // (optional) default: none
              tag: 'beacon', // (optional) add tag to message
              playSound: true,
              soundName: 'default'
            });
            this.setState({beacon: data.beacons[0], notificationBadgeNumber: this.state.notificationBadgeNumber + 1});
            break;
          case 'far':
            data.beacons[0].proximityEs = 'Lejano';
            PushNotification.localNotification({
              /* Android Only Properties */
              // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
              // ticker: 'My Notification Ticker', // (optional)
              // autoCancel: true, // (optional) default: true
              // largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
              // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
              // bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
              // subText: 'This is a subText', // (optional) default: none
              // color: 'red', // (optional) default: system default
              // vibrate: true, // (optional) default: true
              // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
              // tag: 'some_tag', // (optional) add tag to message
              // group: 'group', // (optional) add group to message
              // ongoing: false, // (optional) set whether this is an "ongoing" notification

              /* iOS only properties */
              // alertAction: 'view',// (optional) default: view
              // category: null,// (optional) default: null
              // userInfo: null,// (optional) default: null (object containing additional notification data)
              title: 'Afuera de la tienda', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
              message: 'Entra a la store y compra con increibles descuentos', // (required)
              bigText: 'Felicitaciones has comprado con exito aprovechando el descuento de la tienda =)', // (optional) default: "message" prop
              subText: 'By jah', // (optional) default: none
              tag: 'beacon', // (optional) add tag to message
              playSound: true,
              soundName: 'default'
            });
            this.setState({beacon: data.beacons[0], notificationBadgeNumber: this.state.notificationBadgeNumber + 1});
            break;
          default:
            data.beacons[0].proximityEs = 'Distancia desconocida';
            this.setState({beacon: data.beacons[0]});
            break;
        }
      }
    );

    // // monitoring events
    // this.regionDidEnterEvent = DeviceEventEmitter.addListener(
    //   'regionDidEnter',
    //   (data) => {
    //     console.log('monitoring - regionDidEnter data: ', data);
    //     const time = moment().format(TIME_FORMAT);
    //   }
    // );

    // this.regionDidExitEvent = DeviceEventEmitter.addListener(
    //   'regionDidExit',
    //   ({identifier, uuid, minor, major}) => {
    //     console.log('monitoring - regionDidExit data: ', {identifier, uuid, minor, major});
    //     const time = moment().format(TIME_FORMAT);
    //     // this.setState({regionExitDatasource: this.state.rangingDataSource.cloneWithRows([{identifier, uuid, minor, major, time}])});
    //   }
    // );

    //Push norificatin
    PushNotification.configure({

      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function(token) {
        console.log('TOKEN:', token);
      },

      // (required) Called when a remote or local notification is opened or received
      onNotification: function(notification) {
        console.log('NOTIFICATION:', notification);

        // process the notification
        if (notification.userInteraction && !notification.foreground) {
          console.log(12121212);
          // const userInfo = notification.getData(); // { type: "timer", elapsedAt: Date }
          // PushNotification.cancelLocalNotifications(userInfo.type);
        }
        // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
        notification.finish(PushNotificationIOS.FetchResult.NoData);
      },

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
      senderID: 'YOUR GCM SENDER ID',

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
        * (optional) default: true
        * - Specified if permissions (ios) and token (android and ios) will requested or not,
        * - if not, you must call PushNotificationsHandler.requestPermissions() later
        */
      requestPermissions: true
    });
  }

  pushStackView = (routeName , params = {}) => {
    this.props.navigate({routeName, params});
  }

  renderBeaconInfo = () => {
    // if (!this.state.beacon.proximity) {
    //   return null;
    // }

    return (
      <View style={styles.userContainer}>
        <Text style={styles.linkButton}>
          Beacon detection: {this.state.beacon.proximityEs || 'Desconectado'}
        </Text>
      </View>
    );
  };

  render() {
    const storesButtons = stores.map((store) => (
      <TouchableOpacity
        key={store.id}
        onPress={() => this.pushStackView('SpotBossDashboard')}
        style={styles.button}>
        {store.icon}
        <Text style={styles.textButton}>
          {store.text}
        </Text>
      </TouchableOpacity>
    ));

    return (
      <ScrollView
        style={styles.root}
        contentContainerStyle={styles.container}>
          {this.renderBeaconInfo()}
          {storesButtons}
      </ScrollView>
    );
  }
}

const circle = {
  borderWidth: 0,
  borderRadius: 40,
  width: 80,
  height: 80
};

const styles = StyleSheet.create({
  userContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    width: appStyle.windowWidth,
    marginBottom: 10
  },
  container: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center'
  },
  root: {
    padding: 8,
    backgroundColor: colors.alterBackground
  },
  button: {
    width: (appStyle.windowWidth - 8 * 6) / 3,
    height: (appStyle.windowWidth - 8 * 6) / 3,
    backgroundColor: '#e5e5e5',
    marginTop: 5,
    marginLeft: 5,
    marginRight: 5,
    marginBottom: 15,
    justifyContent: 'center',
    alignItems: 'center'
  },
  textButton: {
    color: 'black',
    fontWeight: 'bold',
    fontSize: 10,
    textAlign: 'center',
    marginTop: 5
  }
});

export default StoresView;
